http://www.analogmuseum.org/library/handbook_of_analog_computation.pdf
https://zwischenzugs.com/2019/03/25/aws-vs-k8s-is-the-new-windows-vs-linux/
http://dl.lateralis.org/public/sagebook/sagebook-ba6596d.pdf

My rationale behind this approach for estimation:

Traditionally, software was viewed as an assemblage of processng components. But from the API perspective, I view software as a set of pure interactions. Because I think that APIs are the substrate which facilitate interactions between information processing components, that is - humnas, databases and back-end systems, whose behaviors are assumed to be already defined (implemented). I view data read/write as transformations on the message template which is part of interactions. 

Thus, most of the effort in API imlementations is spent on preparing the requests, transforming the responses and handling the data formats. Accordingly I have selected these as the parapmeters that influence the estimates.

-----

import math


def fact(n):
	res = 1
	for i in range(2,n+1):
		res *= i
	return res

def ncr(n, r):
	return fact(n)/(fact(n-r)*fact(r))

bn = []
bn.append(1.0)

for i in range(0,50):
	sum = 0.0
	for k in range(len(bn)):
		sum += bn[k]*ncr(len(bn)+1, k)
	b = (0-sum)/(len(bn)+1)
	if abs(b) < 1.0e-08:
		b = 0
	bn.append(b)

for i in range(0, len(bn), 2):
	print (bn[i])

---------------
-----------------------------------

 n^x = (1 + xlogn/k)^k
 = 1 + (k,1) (xlogn/k) + (k,2) (xlogn/k)^2 + (k,3) (xlogn/k)^3 + ... + (xlogn/k)^k

 sum (n:2->c) ((logn)^k) = c ( (logc)^k - k(logc)^k-1 + k(k-1)(logc)^k-2 + ... + k!)

 sum (n:2->c) (n^x) = 

 c (1 + (k,m) (x/k)^k * ( (logc)^k - k(logc)^k-1 + k(k-1)(logc)^k-2  ) )

 c (1 + (k,m) (x/k)^k * (logc)^k (1 - k(logc)^-1 ) )

 c (1 + axlogc/k)^k   ;   (1 - k(logc)^-1) = a^k

 a^k = (1 - k(logc)^-1)
 
 a = (1 - k(logc)^-1)^(1/k)
 
--------------------------------
 
 c (1 + axlogc/k)^k = -1
 
 (1 + axlogc/k)^k = -1/c

 axlogc/k = (-1/c)^(1/k)
 
---------------

import math

logc = 4000

# logc is the log of the number of terms (c) in the zeta function sum.
# n is the rising integer base for n^x or n^-x in the sum.
# n = 2 to c (excluding the first term of 1)
# n^x is written as e^(xlogn) and approximated as (1 + xlogn/k)^k. 
# k is the finite exponent of e approximation. 
# k is also the number of zeros (or minus ones).
# m is the rising exponent of (xlogn/k) in the binomial expansion of (1 + xlogn/k)^k. 
# m = 1 to k (excluding the first term of 1)

def logsum():
	for m in range (3, 5000, 200):
		sum = 0.0
		v = 1
		sum = 1
		for i in range (m):
			v *= (m-i) / logc
			a = (-1)**(i+1) * v
			sum += a
#		print (sum + math.sqrt(math.log(m)))
		s = (1 - (1/math.e) * math.log (1+ 2.9*m/logc) )
		print (1 + sum, ',', 1 + s)

logsum()

# 1/2 logc + c (logc)^n (2 - 1/e log (1+3n/logc) )

# s = 0.5*gc + c * (gc**n) *(2 - (1/e) * math.log (1+ 3*n/gc) )

# sum = 3 - math.sqrt(math.log(m))
	
	
# x((logx)^1 - 1)
# x((logx)^2 - 2*(logx) + 2*1)
# x((logx)^3 - 3*(logx)^2 + 3*2*(logx) - 3*2*1)
# x((logx)^4 - 4*(logx)^3 + 4*3*(logx)^2 - 4*3*2*(logx) + 4*3*2*1)

# x(logx)^4 ( 1 - 4/(logx) + 4*3/(logx)^2 - 4*3*2/(logx)^3 + 4*3*2*1/(logx)^4)
# x(logx)^3 ( 1 - 3/(logx) + 3*2/(logx)^2 - 3*2*1/(logx)^3)
# x(logx)^2 ( 1 - 2/(logx) + 2*1/(logx)^2)
# x(logx)^1 ( 1 - 1/(logx))

---------------
Hello J,

Happy to learn that you have Citi email access now.

The development for ILOC project is directed by Alex (Tech Lead). I work with the team as a Dev Lead. John (PM) might share a full list of RACI and communication protocols soon.

Attached with this email are:
* A document with a list of CMP requests to be raised by each in the dev team to get access to various dev-related facilities at Citi. One can raise these requests on behalf of others as well. You can reach out to John or Subodh for any help with these.

* An ICD and sequence diagrams. These are part of the docs that we, the dev team, will go through for work on ILOC project.

Monday is a bank holiday in Ireland. You can forward this email to Citi email IDs of other team members. Please do not forward ANY citi emails or docs to non-Citi email addresses.

Welcome onboard!

-----------

Team,

I have checked in the ICD and sequence diagrams for the RM in bitbucket.

The ILOC development will aim to deliver an implentation of the APIs as detailed in these documents, while utilizing information in other documents in the context of these APIs.

Wherever information is missng or inconsistent across documents, dev will either consult team or make decisions which will be open for review through sprint reviews, JIRA comments or commit logs.

Dev KT will begin once the team is on-boarded (with all CMPs done for access etc), and then the Dev tasks will kick-off.


------------
http://go.helms-net.de/math/binomial/zeta_bernoulli.pdf



 
  
 x = (-1/c)^(1/k) * k/(alogc)

 x = (-1/c)^(1/k) * k/ (logc * (1 - k(logc)^-1)^(1/k) )

 x = (k/logc) * (-1/c)^(1/k) * (1 - k(logc)^-1)^(1/k) 

 x = (k/logc) * (-1/c)^(1/k) * (1 - k/(logc))^(1/k) 

 x = (k/logc) * ( (-1/c) * (1 - k/(logc)) )^(1/k) 

--------------------------------
 



