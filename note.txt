import math


def fact(n):
	res = 1
	for i in range(2,n+1):
		res *= i
	return res

def ncr(n, r):
	return fact(n)/(fact(n-r)*fact(r))

bn = []
bn.append(1.0)

for i in range(0,50):
	sum = 0.0
	for k in range(len(bn)):
		sum += bn[k]*ncr(len(bn)+1, k)
	b = (0-sum)/(len(bn)+1)
	if abs(b) < 1.0e-08:
		b = 0
	bn.append(b)

for i in range(0, len(bn), 2):
	print (bn[i])

---------------
-----------------------------------

 n^x = (1 + xlogn/k)^k
 = 1 + (k,1) (xlogn/k) + (k,2) (xlogn/k)^2 + (k,3) (xlogn/k)^3 + ... + (xlogn/k)^k

 sum (n:2->c) ((logn)^k) = c ( (logc)^k - k(logc)^k-1 + k(k-1)(logc)^k-2 + ... + k!)

 sum (n:2->c) (n^x) = 

 c (1 + (k,m) (x/k)^k * ( (logc)^k - k(logc)^k-1 + k(k-1)(logc)^k-2  ) )

 c (1 + (k,m) (x/k)^k * (logc)^k (1 - k(logc)^-1 ) )

 c (1 + axlogc/k)^k   ;   (1 - k(logc)^-1) = a^k

 a^k = (1 - k(logc)^-1)
 
 a = (1 - k(logc)^-1)^(1/k)
 
--------------------------------
 
 c (1 + axlogc/k)^k = -1
 
 (1 + axlogc/k)^k = -1/c

 axlogc/k = (-1/c)^(1/k)
 
---------------

import math

logc = 4000

# logc is the log of the number of terms (c) in the zeta function sum.
# n is the rising integer base for n^x or n^-x in the sum.
# n = 2 to c (excluding the first term of 1)
# n^x is written as e^(xlogn) and approximated as (1 + xlogn/k)^k. 
# k is the finite exponent of e approximation. 
# k is also the number of zeros (or minus ones).
# m is the rising exponent of (xlogn/k) in the binomial expansion of (1 + xlogn/k)^k. 
# m = 1 to k (excluding the first term of 1)

def logsum():
	for m in range (3, 5000, 200):
		sum = 0.0
		v = 1
		sum = 1
		for i in range (m):
			v *= (m-i) / logc
			a = (-1)**(i+1) * v
			sum += a
#		print (sum + math.sqrt(math.log(m)))
		s = (1 - (1/math.e) * math.log (1+ 2.9*m/logc) )
		print (1 + sum, ',', 1 + s)

logsum()

# 1/2 logc + c (logc)^n (2 - 1/e log (1+3n/logc) )

# s = 0.5*gc + c * (gc**n) *(2 - (1/e) * math.log (1+ 3*n/gc) )

# sum = 3 - math.sqrt(math.log(m))
	
	
# x((logx)^1 - 1)
# x((logx)^2 - 2*(logx) + 2*1)
# x((logx)^3 - 3*(logx)^2 + 3*2*(logx) - 3*2*1)
# x((logx)^4 - 4*(logx)^3 + 4*3*(logx)^2 - 4*3*2*(logx) + 4*3*2*1)

# x(logx)^4 ( 1 - 4/(logx) + 4*3/(logx)^2 - 4*3*2/(logx)^3 + 4*3*2*1/(logx)^4)
# x(logx)^3 ( 1 - 3/(logx) + 3*2/(logx)^2 - 3*2*1/(logx)^3)
# x(logx)^2 ( 1 - 2/(logx) + 2*1/(logx)^2)
# x(logx)^1 ( 1 - 1/(logx))


------------
http://go.helms-net.de/math/binomial/zeta_bernoulli.pdf

  
 x = (-1/c)^(1/k) * k/(alogc)

 x = (-1/c)^(1/k) * k/ (logc * (1 - k(logc)^-1)^(1/k) )

 x = (k/logc) * (-1/c)^(1/k) * (1 - k(logc)^-1)^(1/k) 

 x = (k/logc) * (-1/c)^(1/k) * (1 - k/(logc))^(1/k) 

 x = (k/logc) * ( (-1/c) * (1 - k/(logc)) )^(1/k) 

--------------------------------
 
The dev team makes a sprint release of ILOC POC (Plan-B) today, tagged as "DEV-RELEASE-1.0". You can release it as a milestone release or final release for the project, as needed.

The release notes (attached with this email) and other release artefacts are available at <>

The development is completed within the planned dev sprints despite the deleays and other issues that affected the work.

Release Notes for the Sprint-6 

Location of release artefacts

Release Notes
Source code
Deployable artefacts 
Manual test cases
Code review records
Logging outputs

other notes:
1. The latest changes to the acceptance criteria, received on 19.9.19 were not addressed in this release. They can be scheduled for next sprint.

2. SOAP UI test cases were produced instead of curl scripts

3. Logging output includes references to the line items in the acceptance criteria

-----------



Hi Alex,

While technically I agree with you that the batching requirement can be best met by a pervasive MQ approach all through the solution (among internal components as well), personally I feel that we should challenge the batch requirement for the sake of innovation and best practices, instead of allowing a throw-back to legacy architectures.

Following are a few problems I see with the whole solution (requirements and approach as well)

1. APIs need to be removed from all iternal microservices (HSM adapters, DLT adapters etc), and they need to be made MQ consumers and MQ producers. This will push the dev estimates.

2. MQ solutions are notorious for being buggy and unreliable, due to lack of transparency (sender and receiver have no direct communication). There is no wonder that MQ solutions are being phased out in favor of APIs.

3. nCipher service is API based and can't support MQ. Whatever benefit of converting all APIs to MQ along the flow, wil be lost in the final leg of flow with DLTs and HSMs which are not in our control.

4. Branding of Nexus as an innovation might be affected due to its techstack and approach which is heavily MQ-based. AMQP does not fix this.

All of the above are strictly my personal opinions, which could be wrong (different from other seemingly correct opinions) and there are no assertions in any of the above regarding their absolute truth.


------------



